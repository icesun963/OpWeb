/*Generated by SharpKit 5 v5.2.1*/
/* 
* @param {Object} target Ŀ����� 
* @param {Object} source Դ���� 
* @param {boolean} deep �Ƿ���(�̳�)�����еĶ��� 
* @returns {Object} ���ؼ̳���source�������Ե��¶��� 
*/
Object.extend = function (target, /*optional*/source, /*optional*/deep) {
    target = target || {};
    var sType = typeof source, i = 1, options;
    if (sType === 'undefined' || sType === 'boolean') {
        deep = sType === 'boolean' ? source : false;
        source = target;
        target = this;
    }
    if (typeof source !== 'object' && Object.prototype.toString.call(source) !== '[object Function]')
        source = {};
    while (i <= 2) {
        options = i === 1 ? target : source;
        if (options != null) {
            for (var name in options) {
                var src = target[name], copy = options[name];
                if (target === copy)
                    continue;
                if (deep && copy && typeof copy === 'object' && !copy.nodeType)
                    target[name] = this.extend(src ||
(copy.length != null ? [] : {}), copy, deep);
                else if (copy !== undefined)
                    target[name] = copy;
            }
        }
        i++;
    }
    return target;
}; 

global.Clr = {};
global.Node = function(){};
global.navigator = function(){};
global.navigator.userAgent = "";
global.document = function(){};
global.document.implementation= function(){};
global.document.implementation.createDocument = true;
global.HTMLImageElement = function(){};
global.HTMLInputElement = function(){};
global.window = global;

require('./res/jsclr.js');

console.log("app start..");





 var JsTypes = global.Clr["JsTypes"];
 require('./system.js');
 require('./GameApp.js');
 require('./OpLog.js');
function Main()
{
    OpLog.OpFunction.add_OnLogChangeDataPush(OpFunction_OnLogChangeDataPush);
};
function OpFunction_OnLogChangeDataPush(opid, items, tag)
{
    GameApp.Console.WriteLine$$String$$Object$Array("{0} {1} ", opid, OpLog.Exctions.ToJson(items));
};
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var OpHost$JS$TestItem =
{
    fullname: "OpHost.JS.TestItem",
    baseTypeName: "OpLog.OpObject",
    assemblyName: "OpHost.JS",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._name = null;
            OpLog.OpObject.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._name;
        },
        set_Name: function (value)
        {
            this._name = value;
            this.OnPropertyChanged("Name");
        }
    }
};
JsTypes.push(OpHost$JS$TestItem);

console.log("start Compile..");
var compiler = global.Clr["Compile"];
compiler();


console.log("End Compile..");

var WatchJS = require("./web/watch.js");
var watch = WatchJS.watch;
var OpItem = function(obj){
    Object.extend(obj,new OpLog.OpObject.ctor());
    obj.toString = function(){
        return  typeof(this).name;
    };
    watch(obj,function(prop, action, newval, oldval){
        console.log(prop + " " + action + " " + newval);
        this.OnPropertyChanged(prop);
    });
};

Main();

var OpItem = function () {
    this.disposed = false;
    this.PropertyChanged = null;
    this.OnDispose = null;
    this._OpId = null;

    this._OpId = OpLog.OpFunction.GetNewId();
    System.Object.ctor.call(this);

    watch(this, function (prop, action, newval, oldval) {
        console.log(prop + " " + action + " " + newval);
        this.OnPropertyChanged(prop);
    });

    this.constructor =  {
        _type : {
            Kind : "Class" ,
            _name:"OpItem" ,
            fullname : "OpItem",
            baseTypeName : "OpLog.OpObject",
            assemblyName : "App"
        },
        interfaces : []
    };

    this.OnSetMaster = function () {
    };
    this.add_PropertyChanged = function (value) {
        this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
    };
    this.remove_PropertyChanged = function (value) {
        this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
    };
    this.get_OpId = function () {
        return this._OpId;
    };
    this.set_OpId = function (value) {
        this._OpId = value;
    };
    this.OnPropertyChanged = function (propertyName) {
        if (this.PropertyChanged != null) {
            this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs.ctor(propertyName));
        }
    };
    this.add_OnDispose = function (value) {
        this.OnDispose = $CombineDelegates(this.OnDispose, value);
    };
    this.remove_OnDispose = function (value) {
        this.OnDispose = $RemoveDelegate(this.OnDispose, value);
    };
    this.Dispose = function () {
        this.Dispose$$Boolean(true);
        System.GC.SuppressFinalize(this);
    };
    this.ReleaseManagedResources = function () {
        this.PropertyChanged = null;
    },
    this.ReleaseUnmanagedResources = function () {
    };
    this.Dispose$$Boolean = function (disposing) {
        if (!this.disposed) {
            if (disposing) {
                this.ReleaseManagedResources();
            }
            this.ReleaseUnmanagedResources();
        }
        if (this.OnDispose != null)
            this.OnDispose();
        this.disposed = true;
    };
};

var newItem = function () {
    this.item1 = "111";
    OpItem.call(this);
};
var testitem = new newItem();
OpLog.OpFunction.SetMaster(testitem);
testitem.item1 = "xxx";


