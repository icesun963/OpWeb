/*Generated by SharpKit 5 v5.2.1*/
var JsTypes = global.Clr["JsTypes"];

if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var OpLog$NoLogAttribute =
 {
    fullname: "OpLog.NoLogAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Attribute.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$NoLogAttribute);
var OpLog$SyncPriorityAttribute =
 {
    fullname: "OpLog.SyncPriorityAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Priority = 0;
            System.Attribute.ctor.call(this);
        },
        Priority$$: "GameApp.Common.Priority",
        get_Priority: function ()
        {
            return this._Priority;
        },
        set_Priority: function (value)
        {
            this._Priority = value;
        }
    }
};
JsTypes.push(OpLog$SyncPriorityAttribute);
var OpLog$RemoteAttribute =
 {
    fullname: "OpLog.RemoteAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Attribute.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$RemoteAttribute);
var OpLog$SyncLvAttribute =
 {
    fullname: "OpLog.SyncLvAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Lv = 0;
            System.Attribute.ctor.call(this);
        },
        Lv$$: "System.Int32",
        get_Lv: function ()
        {
            return this._Lv;
        },
        set_Lv: function (value)
        {
            this._Lv = value;
        }
    }
};
JsTypes.push(OpLog$SyncLvAttribute);
var OpLog$OpConfig =
 {
    fullname: "OpLog.OpConfig",
    baseTypeName: "GameApp.Common.Config.Config$1",
    staticDefinition:
    {
        cctor: function ()
        {
            OpLog.OpConfig._instance = null;
            OpLog.OpConfig.logger = GameApp.Common.Logging.LogManager.CreateLogger();
        },
        Instance$$: "OpLog.OpConfig",
        get_Instance: function ()
        {
            if (OpLog.OpConfig._instance == null)
            {
                OpLog.OpConfig._instance = new OpLog.OpConfig.ctor();
            }
            return OpLog.OpConfig._instance;
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._hostName = null;
            this._watingSyncTimeOut = -1;
            GameApp.Common.Config.Config$1.ctor$$String.call(this, OpLog.OpConfig.ctor, "OpConfig");
        },
        NodeName$$: "System.String",
        get_NodeName: function ()
        {
            if (this._hostName == null)
            {
                var IpEntry = System.Net.Dns.GetHostEntry$$String(System.Net.Dns.GetHostName());
                this._hostName = IpEntry.get_HostName();
            }
            return this.GetString("NodeName", this._hostName);
        },
        set_NodeName: function (value)
        {
            this.Set("NodeName", value);
        },
        WatingSyncTimeOut$$: "System.Int32",
        get_WatingSyncTimeOut: function ()
        {
            if (this._watingSyncTimeOut == -1)
                this._watingSyncTimeOut = this.GetInt$$String$$Int32("WatingSyncTimeOut", 1000);
            return this._watingSyncTimeOut;
        },
        set_WatingSyncTimeOut: function (value)
        {
            this._watingSyncTimeOut = -1;
            this.Set("WatingSyncTimeOut", value);
        },
        RequestWatingMs$$: "System.Int32",
        get_RequestWatingMs: function ()
        {
            return this.GetInt$$String$$Int32("RequestWatingMs", 0);
        },
        set_RequestWatingMs: function (value)
        {
            this.Set("RequestWatingMs", value);
        },
        TimeFix$$: "System.Int32",
        get_TimeFix: function ()
        {
            return this.GetInt$$String$$Int32("TimeFix", 1);
        },
        set_TimeFix: function (value)
        {
            this.Set("TimeFix", value);
        },
        Hosts$$: "System.String",
        get_Hosts: function ()
        {
            var sb = new System.Text.StringBuilder.ctor();
            for (var i = 1; i < 99; i++)
            {
                var str = this.GetString("Host" + i, "");
                if (str != "")
                {
                    sb.Append$$String(str + ";");
                }
                else
                {
                    break;
                }
            }
            if (sb.get_Length() > 0)
                return sb.toString();
            return this.GetString("Hosts", "OpLogHttpSource|http://localhost:8228/;");
        },
        set_Hosts: function (value)
        {
            this.Set("Hosts", value);
        },
        Server$$: "System.String",
        get_Server: function ()
        {
            return this.GetString("Server", "http://localhost:8229/");
        },
        set_Server: function (value)
        {
            this.Set("Server", value);
        },
        RootGuid$$: "System.String",
        get_RootGuid: function ()
        {
            return this.GetString("RootGuid", System.Guid.Empty.toString());
        },
        set_RootGuid: function (value)
        {
            this.Set("RootGuid", value);
        },
        UserTs$$: "System.Boolean",
        get_UserTs: function ()
        {
            return this.GetBoolean("UserTs", true);
        },
        set_UserTs: function (value)
        {
            this.Set("UserTs", value);
        },
        MasterCheck$$: "System.Boolean",
        get_MasterCheck: function ()
        {
            return this.GetBoolean("MasterCheck", false);
        },
        set_MasterCheck: function (value)
        {
            this.Set("MasterCheck", value);
        },
        OpEventDataOn$$: "System.Boolean",
        get_OpEventDataOn: function ()
        {
            return this.GetBoolean("OpEventOn", false);
        },
        set_OpEventDataOn: function (value)
        {
            this.Set("OpEventOn", value);
        },
        RingBuffLenght$$: "System.Int32",
        get_RingBuffLenght: function ()
        {
            return this.GetInt$$String$$Int32("RingBuffLenght", 1000);
        },
        set_RingBuffLenght: function (value)
        {
            this.Set("RingBuffLenght", value);
        },
        AutoPushSleep$$: "System.Int32",
        get_AutoPushSleep: function ()
        {
            return this.GetInt$$String$$Int32("AutoPushSleep", 30);
        },
        set_AutoPushSleep: function (value)
        {
            this.Set("AutoPushSleep", value);
        },
        AutoPushOn$$: "System.Boolean",
        get_AutoPushOn: function ()
        {
            return this.GetBoolean("AutoPushOn", true);
        },
        set_AutoPushOn: function (value)
        {
            this.Set("AutoPushOn", value);
        },
        LogListOff$$: "System.Boolean",
        get_LogListOff: function ()
        {
            return this.GetBoolean("LogListOff", false);
        },
        set_LogListOff: function (value)
        {
            this.Set("LogListOff", value);
        },
        LogOn$$: "System.Boolean",
        get_LogOn: function ()
        {
            return this.GetBoolean("LogOn", false);
        },
        set_LogOn: function (value)
        {
            this.Set("LogOn", value);
        },
        ctor$$String: function (sectionName)
        {
            this._hostName = null;
            this._watingSyncTimeOut = -1;
            GameApp.Common.Config.Config$1.ctor$$String.call(this, OpLog.OpConfig.ctor, sectionName);
        }
    }
};
JsTypes.push(OpLog$OpConfig);
var OpLog$IOpList = {fullname: "OpLog.IOpList", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.ComponentModel.INotifyPropertyChanged"], Kind: "Interface"};
JsTypes.push(OpLog$IOpList);
var OpLog$OpList$1 =
 {
    fullname: "OpLog.OpList$1",
    baseTypeName: "System.Collections.Generic.List$1",
    assemblyName: "NodeLog",
    interfaceNames: ["OpLog.IOpList"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this.PropertyChanged = null;
            System.Collections.Generic.List$1.ctor.call(this, this.T);
        },
        Add: function (obj)
        {
            System.Collections.Generic.List$1.commonPrototype.Add.call(this, obj);
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(obj, new System.ComponentModel.PropertyChangedEventArgs.ctor("add"));
            }
        },
        Remove: function (obj)
        {
            if (System.Collections.Generic.List$1.commonPrototype.Remove.call(this, obj))
            {
                if (this.PropertyChanged != null)
                {
                    this.PropertyChanged(obj, new System.ComponentModel.PropertyChangedEventArgs.ctor("del"));
                }
                if (Is(obj, OpLog.INotifyDisposable.ctor))
                {
                    (As(obj, OpLog.INotifyDisposable.ctor)).Dispose();
                }
                return true;
            }
            return false;
        },
        RemoveAt: function (index)
        {
            if (this.get_Count() > index)
            {
                var item = this.get_Item$$Int32(index);
                return this.Remove(item);
            }
            return false;
        },
        add_PropertyChanged: function (value)
        {
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value)
        {
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        AddItem: function (obj)
        {
            this.Add(Cast(obj, this.T));
        },
        RemoveItem: function (obj)
        {
            this.Remove(Cast(obj, this.T));
        }
    }
};
JsTypes.push(OpLog$OpList$1);
var OpLog$OpLogManager =
 {
    fullname: "OpLog.OpLogManager",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            OpLog.OpLogManager.logger = GameApp.Common.Logging.LogManager.CreateLogger();
            OpLog.OpLogManager._default = null;
        },
        Default$$: "OpLog.OpLogManager",
        get_Default: function ()
        {
            if (OpLog.OpLogManager._default == null)
            {
                OpLog.OpLogManager._default = new OpLog.OpLogManager.ctor();
            }
            return OpLog.OpLogManager._default;
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.SourceMap = new System.SafeDictionary$2.ctor(System.String.ctor, OpLog.IOpLogSource.ctor);
            this.DestMap = new System.SafeDictionary$2.ctor(System.String.ctor, OpLog.IOpLogSyncBind.ctor);
            this._lock = new System.Object.ctor();
            this.OnDispose = null;
            this.OnItemSyncEnd = null;
            this.OnDestAdd = null;
            this.OnDestDisposeing = null;
            System.Object.ctor.call(this);
        },
        ContainsSource: function (rid)
        {
            var source = null;
            return (function ()
            {
                var $1 = {Value: source};
                var $res = this.SourceMap.TryGetValue(rid, $1);
                source = $1.Value;
                return $res;
            }).call(this);
        },
        FindSource: function (rid, lv)
        {
            var source = null;
            if ((function ()
            {
                var $1 = {Value: source};
                var $res = this.SourceMap.TryGetValue(rid, $1);
                source = $1.Value;
                return $res;
            }).call(this))
            {
                if (lv == OpLog.SourceBindLv.Normal)
                    return source;
                return (function ()
                {
                    var $v1 = new OpLog.OpLogSourceBindLoader.ctor(source);
                    $v1.set_Lv(lv);
                    return $v1;
                }).call(this);
            }
            return null;
        },
        MasterSize: function ()
        {
            return this.SourceMap.get_Count();
        },
        SourceBind: function (bind)
        {
            var logSource = new OpLog.OpLogSourceBind.ctor$$IOpItem(bind);
            this.SourceMap.set_Item$$TKey(bind.get_OpId(), logSource);
            return logSource;
        },
        FindSubMasterItemRid: function (dest)
        {
            var source = null;
            if ((function ()
            {
                var $1 = {Value: source};
                var $res = this.SourceMap.TryGetValue(dest.get_OpId(), $1);
                source = $1.Value;
                return $res;
            }).call(this))
            {
                return dest.get_OpId();
            }
            var $it1 = this.SourceMap.GetEnumerator();
            while ($it1.MoveNext())
            {
                var map = $it1.get_Current();
                if (map.get_Value().DoOpItemSearch((function ()
                {
                    var $v2 = new OpLog.OpItemSearch.ctor();
                    $v2.set_RId(dest.get_OpId());
                    return $v2;
                }).call(this)))
                {
                    return map.get_Key();
                }
            }
            return null;
        },
        DisposeSorce: function (bind)
        {
            var source = null;
            if ((function ()
            {
                var $1 = {Value: source};
                var $res = this.SourceMap.TryGetValue(bind.get_OpId(), $1);
                source = $1.Value;
                return $res;
            }).call(this))
            {
                this.SourceMap.Remove(bind.get_OpId());
                source.Dispose();
                if (this.OnDispose != null)
                {
                    this.OnDispose(bind.get_OpId(), System.EventArgs.Empty);
                }
            }
        },
        GetChangeData: function (syncts, rid)
        {
            return this.SourceMap.get_Item$$TKey(rid).GetChangeData(syncts, rid, 0);
        },
        RemoteMasterAddNotify: function (rid, source)
        {
            if (this.DestMap.ContainsKey(rid))
            {
                if (this.DestMap.get_Item$$TKey(rid) != source)
                {
                    if (!this.ContainsSource(rid))
                    {
                        if (Is(this.DestMap.get_Item$$TKey(rid).get_Source(), OpLog.OpLogSourceBindLoader.ctor))
                        {
                            OpLog.OpLogManager.logger.Warn$$String$$Object$Array("Master 切换:{0}", source);
                            (As(this.DestMap.get_Item$$TKey(rid).get_Source(), OpLog.OpLogSourceBindLoader.ctor)).set_Source(source);
                        }
                        else
                        {
                            this.DestMap.get_Item$$TKey(rid).set_Source(source);
                        }
                    }
                }
            }
        },
        add_OnDispose: function (value)
        {
            this.OnDispose = $CombineDelegates(this.OnDispose, value);
        },
        remove_OnDispose: function (value)
        {
            this.OnDispose = $RemoveDelegate(this.OnDispose, value);
        },
        add_OnItemSyncEnd: function (value)
        {
            this.OnItemSyncEnd = $CombineDelegates(this.OnItemSyncEnd, value);
        },
        remove_OnItemSyncEnd: function (value)
        {
            this.OnItemSyncEnd = $RemoveDelegate(this.OnItemSyncEnd, value);
        },
        Sync: function (opitem)
        {
            if (this.DestMap.ContainsKey(opitem.get_OpId()))
            {
                this.DestMap.get_Item$$TKey(opitem.get_OpId()).Sync();
            }
        },
        ContainsDest: function (rid)
        {
            return this.DestMap.ContainsKey(rid);
        },
        FindSubSliveItemRid: function (dest)
        {
            if (this.DestMap.ContainsKey(dest.get_OpId()))
            {
                return dest.get_OpId();
            }
            var $it2 = this.DestMap.GetEnumerator();
            while ($it2.MoveNext())
            {
                var map = $it2.get_Current();
                if (map.get_Value().DoOpItemSearch((function ()
                {
                    var $v3 = new OpLog.OpItemSearch.ctor();
                    $v3.set_RId(dest.get_OpId());
                    return $v3;
                }).call(this)))
                {
                    return map.get_Key();
                }
            }
            return null;
        },
        add_OnDestAdd: function (value)
        {
            this.OnDestAdd = $CombineDelegates(this.OnDestAdd, value);
        },
        remove_OnDestAdd: function (value)
        {
            this.OnDestAdd = $RemoveDelegate(this.OnDestAdd, value);
        },
        DestBind: function (dest, source)
        {
            var bind = OpLog.OpLogSyncBind.Build(dest, source);
            bind.add_OnOplogSyncEnd($CreateDelegate(this, this.bind_OnOplogSyncEnd));
            this.DestMap.set_Item$$TKey(dest.get_OpId(), bind);
        },
        bind_OnOplogSyncEnd: function (sender, e)
        {
            if (this.OnItemSyncEnd != null)
            {
                this.OnItemSyncEnd(sender, e);
            }
        },
        add_OnDestDisposeing: function (value)
        {
            this.OnDestDisposeing = $CombineDelegates(this.OnDestDisposeing, value);
        },
        remove_OnDestDisposeing: function (value)
        {
            this.OnDestDisposeing = $RemoveDelegate(this.OnDestDisposeing, value);
        },
        DisposeDest: function (bind)
        {
            for (var $i4 = 0, $t4 = OpLog.Exctions.GetPropertys(bind), $l4 = $t4.length, pinfo = $t4[$i4]; $i4 < $l4; $i4++, pinfo = $t4[$i4])
            {
                var item = OpLog.Exctions.GetPropertyValue(pinfo, bind);
                if (Is(item, System.Collections.IEnumerable.ctor) && Is(item, System.ComponentModel.INotifyPropertyChanged.ctor))
                {
                    var $it4 = (As(item, System.Collections.IEnumerable.ctor)).GetEnumerator();
                    while ($it4.MoveNext())
                    {
                        var subitem = $it4.get_Current();
                        if (Is(subitem, OpLog.IOpItem.ctor))
                            this.DisposeDest(As(subitem, OpLog.IOpItem.ctor));
                    }
                }
            }
            if (this.ContainsDest(bind.get_OpId()))
            {
                this.DestMap.get_Item$$TKey(bind.get_OpId()).Dispose();
                this.DestMap.Remove(bind.get_OpId());
                if (this.OnDispose != null)
                {
                    this.OnDispose(bind.get_OpId(), System.EventArgs.Empty);
                }
            }
        }
    }
};
JsTypes.push(OpLog$OpLogManager);
var OpLog$SourceBindLv =
 {
    fullname: "OpLog.SourceBindLv",
    staticDefinition: {VeryHig: 0, High: 1, Normal: 0, Low: 1, VeryLow: 2, Max: 3},
    Kind: "Enum"
};
JsTypes.push(OpLog$SourceBindLv);
var OpLog$OpLogSourceBind =
 {
    fullname: "OpLog.OpLogSourceBind",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            OpLog.OpLogSourceBind.logger = GameApp.Common.Logging.LogManager.CreateLogger();
        },
        GetChangeDataByLog: function (temp, lv)
        {
            var mapchangeData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var maplistAddData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var maplistRemoveData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var retList = new System.Collections.Generic.List$1.ctor(OpLog.OpChangeItem.ctor);
            for (var i = 0; i < temp.get_Count(); i++)
            {
                var item = temp.get_Item$$Int32(i);
                if (item == null || item.get_Lv() < lv)
                    continue;
                if (!mapchangeData.ContainsKey(item.get_RId()))
                    mapchangeData.set_Item$$TKey(item.get_RId(), new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, OpLog.OpLogSourceBind.SubChangeitem.ctor));
                if (!maplistAddData.ContainsKey(item.get_RId()))
                    maplistAddData.set_Item$$TKey(item.get_RId(), new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor));
                if (!maplistRemoveData.ContainsKey(item.get_RId()))
                    maplistRemoveData.set_Item$$TKey(item.get_RId(), new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor));
                var changeData = mapchangeData.get_Item$$TKey(item.get_RId());
                var listAddData = maplistAddData.get_Item$$TKey(item.get_RId());
                var listRemoveData = maplistRemoveData.get_Item$$TKey(item.get_RId());
                if (item.get_Op() == OpLog.Op.Update)
                {
                    if (!changeData.ContainsKey(item.get_Ns()))
                    {
                        var obj = item.get_BindObject();
                        changeData.Add(item.get_Ns(), (function ()
                        {
                            var $v4 = new OpLog.OpLogSourceBind.SubChangeitem.ctor();
                            $v4.set_Value(OpLog.Exctions.GetValue(obj, item.get_Ns()));
                            $v4.set_Ts(item.get_Ts());
                            $v4.set_Name(item.get_Ns());
                            return $v4;
                        })());
                    }
                }
                else if (item.get_Op() == OpLog.Op.Inster)
                {
                    if (!listAddData.ContainsKey(item.get_Ns()))
                    {
                        listAddData.set_Item$$TKey(item.get_Ns(), new System.Collections.Generic.List$1.ctor(OpLog.OpLogSourceBind.SubChangeitem.ctor));
                    }
                    if (listAddData.ContainsKey(item.get_Ns()))
                    {
                        var list = listAddData.get_Item$$TKey(item.get_Ns());
                        if (!System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(OpLog.OpLogSourceBind.SubChangeitem.ctor, list, function (r)
                        {
                            return r.get_Name() == item.get_OId();
                        }))
                        {
                            list.Add((function ()
                            {
                                var $v5 = new OpLog.OpLogSourceBind.SubChangeitem.ctor();
                                $v5.set_Name(item.get_OId());
                                $v5.set_Ts(item.get_Ts());
                                return $v5;
                            })());
                        }
                    }
                }
                else if (item.get_Op() == OpLog.Op.Delete)
                {
                    if (!listRemoveData.ContainsKey(item.get_Ns()))
                    {
                        listRemoveData.set_Item$$TKey(item.get_Ns(), new System.Collections.Generic.List$1.ctor(OpLog.OpLogSourceBind.SubChangeitem.ctor));
                    }
                    if (listRemoveData.ContainsKey(item.get_Ns()))
                    {
                        var list = listRemoveData.get_Item$$TKey(item.get_Ns());
                        if (!System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(OpLog.OpLogSourceBind.SubChangeitem.ctor, list, function (r)
                        {
                            return r.get_Name() == item.get_OId();
                        }))
                        {
                            list.Add((function ()
                            {
                                var $v6 = new OpLog.OpLogSourceBind.SubChangeitem.ctor();
                                $v6.set_Name(item.get_OId());
                                $v6.set_Ts(item.get_Ts());
                                return $v6;
                            })());
                        }
                    }
                }
            }
            var $it8 = mapchangeData.GetEnumerator();
            while ($it8.MoveNext())
            {
                var mapitem = $it8.get_Current();
                var changeData = mapitem.get_Value();
                var opitem = OpLog.OpChangeItem.New();
                opitem.set_Op(OpLog.Op.Update);
                opitem.set_RId(mapitem.get_Key());
                opitem.set_IsLocal(true);
                var opstr = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
                var $it9 = changeData.GetEnumerator();
                while ($it9.MoveNext())
                {
                    var item = $it9.get_Current();
                    opstr.set_Item$$TKey(item.get_Key(), item.get_Value().get_Value());
                    if (item.get_Value().get_Ts() > opitem.get_Ts())
                    {
                        opitem.set_Ts(item.get_Value().get_Ts());
                    }
                }
                opitem.set_OpStr(opstr);
                retList.Add(opitem);
            }
            var $it10 = maplistAddData.GetEnumerator();
            while ($it10.MoveNext())
            {
                var mapitem = $it10.get_Current();
                var listAddData = mapitem.get_Value();
                var listRemoveData = maplistRemoveData.get_Item$$TKey(mapitem.get_Key());
                var isadd = true;
                for (var i = 0; i < 2; i++)
                {
                    var parselist = isadd ? listAddData : listRemoveData;
                    var $it11 = parselist.GetEnumerator();
                    while ($it11.MoveNext())
                    {
                        var item = $it11.get_Current();
                        var $it12 = item.get_Value().GetEnumerator();
                        while ($it12.MoveNext())
                        {
                            var listitem = $it12.get_Current();
                            var opitem = OpLog.OpChangeItem.New();
                            opitem.set_Op(isadd ? OpLog.Op.Inster : OpLog.Op.Delete);
                            opitem.set_RId(mapitem.get_Key());
                            opitem.set_OId(listitem.get_Name());
                            opitem.set_Ns(item.get_Key());
                            opitem.set_Ts(listitem.get_Ts());
                            opitem.set_IsLocal(true);
                            retList.Add(opitem);
                            if (isadd)
                            {
                                var $it13 = temp.GetEnumerator();
                                while ($it13.MoveNext())
                                {
                                    var r = $it13.get_Current();
                                    if (r.get_OId() == listitem.get_Name() && r.get_Op() == opitem.get_Op())
                                    {
                                        opitem.set_OpStr(r.get_OpStr());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (isadd)
                    {
                        isadd = false;
                    }
                }
            }
            var $it14 = retList.GetEnumerator();
            while ($it14.MoveNext())
            {
                var opChangeItem = $it14.get_Current();
                if (Is(opChangeItem.get_OpStr(), System.Collections.Generic.Dictionary$2.ctor))
                {
                    var dic = (As(opChangeItem.get_OpStr(), System.Collections.Generic.Dictionary$2.ctor));
                    var rebuildObj = OpLog.OpFunction.BuildObject(dic);
                    opChangeItem.set_OpStr(rebuildObj);
                }
            }
            return retList;
        }
    },
    assemblyName: "NodeLog",
    interfaceNames: ["System.IDisposable", "OpLog.IOpLogSource"],
    Kind: "Class",
    definition:
    {
        ctor$$IOpItem: function (bind)
        {
            this._items = null;
            this._BindObjectReference = null;
            this.subSourceMap = null;
            this.SubBindItemMap = new System.SafeDictionary$2.ctor(System.String.ctor, System.String.ctor);
            this._lock = new System.Object.ctor();
            this.disposed = false;
            this.OnDisposing = null;
            this.OnLogAddHandle = null;
            this.OnOpItemSearch = null;
            this._LogSourceBindLv = 0;
            this._RootSource = null;
            System.Object.ctor.call(this);
            this.set_BindObject(bind);
            this.BindSource(bind);
            if (OpLog.OpConfig.get_Instance().get_LogListOff() || bind == null)
            {
            }
            else
            {
                this._items = new System.Collections.Generic.RingBuffer$1.ctor(OpLog.OpChangeItem.ctor, OpLog.OpConfig.get_Instance().get_RingBuffLenght());
            }
        },
        BindObject$$: "OpLog.IOpItem",
        get_BindObject: function ()
        {
            if (this._BindObjectReference != null && this._BindObjectReference.get_IsAlive())
                return As(this._BindObjectReference.get_Target(), OpLog.IOpItem.ctor);
            return null;
        },
        set_BindObject: function (value)
        {
            if (null == value)
            {
                this._BindObjectReference = null;
                return;
            }
            this._BindObjectReference = new System.WeakReference.ctor$$Object(value);
        },
        RId$$: "System.String",
        get_RId: function ()
        {
            return this.get_BindObject() == null ? "" : this.get_BindObject().get_OpId();
        },
        LogSourceBindLv$$: "System.Int32",
        get_LogSourceBindLv: function ()
        {
            return this._LogSourceBindLv;
        },
        set_LogSourceBindLv: function (value)
        {
            this._LogSourceBindLv = value;
        },
        RootSource$$: "OpLog.OpLogSourceBind",
        get_RootSource: function ()
        {
            return this._RootSource;
        },
        set_RootSource: function (value)
        {
            this._RootSource = value;
        },
        GetSource: function ()
        {
            if (this.get_RootSource() != null)
                return this.get_RootSource();
            return this;
        },
        add_OnDisposing: function (value)
        {
            this.OnDisposing = $CombineDelegates(this.OnDisposing, value);
        },
        remove_OnDisposing: function (value)
        {
            this.OnDisposing = $RemoveDelegate(this.OnDisposing, value);
        },
        SourceOk$$: "System.Boolean",
        get_SourceOk: function ()
        {
            return this.get_BindObject() != null;
        },
        ctor$$IOpItem$$OpLogSourceBind: function (bind, rootSource)
        {
            this._items = null;
            this._BindObjectReference = null;
            this.subSourceMap = null;
            this.SubBindItemMap = new System.SafeDictionary$2.ctor(System.String.ctor, System.String.ctor);
            this._lock = new System.Object.ctor();
            this.disposed = false;
            this.OnDisposing = null;
            this.OnLogAddHandle = null;
            this.OnOpItemSearch = null;
            this._LogSourceBindLv = 0;
            this._RootSource = null;
            System.Object.ctor.call(this);
            this.set_BindObject(bind);
            this.set_RootSource(rootSource);
            this.BindSource(bind);
        },
        BindSubSource: function (bind, rootSource, lv)
        {
            var subsrc = new OpLog.OpLogSourceBind.ctor$$IOpItem$$OpLogSourceBind(bind, rootSource);
            subsrc.set_LogSourceBindLv(lv);
            this.add_OnDisposing($CreateAnonymousDelegate(this, function (s, e)
            {
                subsrc.Dispose();
            }));
            this.add_OnOpItemSearch($CreateDelegate(subsrc, subsrc.DoOpItemSearch));
            if (Is(bind, OpLog.INotifyDisposable.ctor))
            {
                (As(bind, OpLog.INotifyDisposable.ctor)).add_OnDispose($CreateAnonymousDelegate(this, function ()
                {
                    this.UnBindSubSource(bind);
                    subsrc.Dispose();
                }));
            }
            if (this.subSourceMap == null)
                this.subSourceMap = new System.SafeDictionary$2.ctor(System.String.ctor, OpLog.OpLogSourceBind.ctor);
            this.subSourceMap.set_Item$$TKey(bind.get_OpId(), subsrc);
        },
        UnBindSubSource: function (iOpItem)
        {
            if (this.subSourceMap != null)
            {
                var subsrc = null;
                (function ()
                {
                    var $1 = {Value: subsrc};
                    var $res = this.subSourceMap.TryGetValue(iOpItem.get_OpId(), $1);
                    subsrc = $1.Value;
                    return $res;
                }).call(this);
                if (subsrc != null)
                {
                    this.subSourceMap.Remove(iOpItem.get_OpId());
                    this.remove_OnOpItemSearch($CreateDelegate(subsrc, subsrc.DoOpItemSearch));
                    subsrc.Dispose();
                }
            }
        },
        BindSource: function (bind)
        {
            bind.remove_PropertyChanged($CreateDelegate(this, this.bind_PropertyChanged));
            bind.add_PropertyChanged($CreateDelegate(this, this.bind_PropertyChanged));
            this.add_OnDisposing($CreateAnonymousDelegate(this, function (x, y)
            {
                bind.remove_PropertyChanged($CreateDelegate(this, this.bind_PropertyChanged));
            }));
            if (GameApp.Common.Helpers.DebugHelper.InDebugMode())
            {
                var st = new System.Diagnostics.StackTrace.ctor();
                var count = 0;
                for (var $i6 = 0, $t6 = st.GetFrames(), $l6 = $t6.length, frame = $t6[$i6]; $i6 < $l6; $i6++, frame = $t6[$i6])
                {
                    if (frame.GetMethod().get_Name() == "BindSource")
                    {
                        count++;
                    }
                }
                if (count >= 10)
                {
                    OpLog.OpLogSourceBind.logger.Warn$$String("ѭ������:" + bind + " type:" + bind.GetType());
                }
                if (count >= 25)
                {
                    throw $CreateException(new System.Exception.ctor$$String("ѭ������:" + bind + " type:" + bind.GetType()), new Error());
                }
            }
            for (var $i7 = 0, $t7 = OpLog.Exctions.GetPropertys(bind), $l7 = $t7.length, pinfo = $t7[$i7]; $i7 < $l7; $i7++, pinfo = $t7[$i7])
            {
                var item = OpLog.Exctions.GetPropertyValue(pinfo, bind);
                if (OpLog.Exctions.IsDefined$1(OpLog.NoLogAttribute.ctor, pinfo, false))
                    continue;
                if (item != null && OpLog.Exctions.IsDefined$1(OpLog.NoLogAttribute.ctor, item, false))
                    continue;
                this.BindList(item, pinfo.get_Name(), bind);
                if (Is(item, OpLog.IOpItem.ctor))
                {
                    this.BindSubSource(As(item, OpLog.IOpItem.ctor), this.GetSource(), this.GetLogLv(pinfo, null));
                }
            }
        },
        BindList: function (item, name, bind)
        {
            if (Is(item, System.Collections.IEnumerable.ctor))
            {
                var $it7 = As(item, System.Collections.IEnumerable.ctor).GetEnumerator();
                while ($it7.MoveNext())
                {
                    var subitem = $it7.get_Current();
                    if (Is(subitem, OpLog.IOpItem.ctor))
                    {
                        this.BindSubSource(As(subitem, OpLog.IOpItem.ctor), this.GetSource(), this.GetLogLv(null, subitem.GetType()));
                    }
                }
                if (Is(item, System.ComponentModel.INotifyPropertyChanged.ctor))
                {
                    var listbind = new OpLog.OpLogSourceBind.OpLogListSourceBind.ctor(name, this.GetSource(), bind);
                    (As(item, System.ComponentModel.INotifyPropertyChanged.ctor)).add_PropertyChanged($CreateDelegate(listbind, listbind.OpLogBind_PropertyChanged));
                    this.add_OnDisposing($CreateAnonymousDelegate(this, function (x, y)
                    {
                        (As(item, System.ComponentModel.INotifyPropertyChanged.ctor)).remove_PropertyChanged($CreateDelegate(listbind, listbind.OpLogBind_PropertyChanged));
                    }));
                }
            }
        },
        GetLogLv: function (rpinfo, type)
        {
            if (rpinfo != null && OpLog.Exctions.IsDefined$1(OpLog.SyncLvAttribute.ctor, rpinfo, false))
            {
                var sla = OpLog.Exctions.GetCustomAttribute$1(OpLog.SyncLvAttribute.ctor, rpinfo, false)[0];
                return sla.get_Lv();
            }
            if (rpinfo != null && OpLog.Exctions.IsDefined$1(OpLog.SyncLvAttribute.ctor, rpinfo, false))
            {
                var sla = OpLog.Exctions.GetCustomAttribute$1(OpLog.SyncLvAttribute.ctor, rpinfo, false)[0];
                return sla.get_Lv();
            }
            if (type != null && OpLog.Exctions.IsDefined$1(OpLog.SyncLvAttribute.ctor, type, false))
            {
                var sla = OpLog.Exctions.GetCustomAttribute$1(OpLog.SyncLvAttribute.ctor, type, false)[0];
                return sla.get_Lv();
            }
            return 0;
        },
        bind_PropertyChanged: function (sender, e)
        {
            var pinfo = null;
            pinfo = OpLog.Exctions.GetProperty(sender, e.get_PropertyName());
            if (pinfo == null || OpLog.Exctions.IsDefined$1(OpLog.NoLogAttribute.ctor, pinfo, true))
            {
                return;
            }
            var oplog = OpLog.OpChangeItem.New();
            oplog.set_Ns(e.get_PropertyName());
            oplog.set_RId((As(sender, OpLog.IOpItem.ctor)).get_OpId());
            oplog.set_Op(OpLog.Op.Update);
            var value = OpLog.Exctions.GetValue(sender, pinfo.get_Name());
            if (OpLog.OpConfig.get_Instance().get_OpEventDataOn())
            {
                var dic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
                dic.Add(e.get_PropertyName(), value);
                oplog.set_OpStr(dic);
            }
            oplog.set_BindObject(sender);
            this.BindList(value, pinfo.get_Name(), (As(sender, OpLog.IOpItem.ctor)));
            if (Is(value, OpLog.IOpItem.ctor))
            {
                this.BindSubSource(As(value, OpLog.IOpItem.ctor), this.GetSource(), this.GetLogLv(pinfo, null));
                this.SubBindItemMap.set_Item$$TKey(pinfo.get_Name(), (As(value, OpLog.IOpItem.ctor)).get_OpId());
            }
            if (value == null && this.SubBindItemMap.ContainsKey(pinfo.get_Name()))
            {
                this.UnBindSubSource(new OpLog.EmptyItem.ctor(this.SubBindItemMap.get_Item$$TKey(pinfo.get_Name())));
                this.SubBindItemMap.Remove(pinfo.get_Name());
            }
            oplog.set_Lv(System.Math.Min$$Int32$$Int32(this.get_LogSourceBindLv(), this.GetLogLv(pinfo, null)));
            if (this.get_BindObject() != null && Is(this.get_BindObject(), OpLog.IBubbleNotifyChangeEvent.ctor))
            {
                (As(this.get_BindObject(), OpLog.IBubbleNotifyChangeEvent.ctor)).DoPropertyChanged(sender, e);
            }
            this.GetSource().AddLog(oplog);
        },
        add_OnLogAddHandle: function (value)
        {
            this.OnLogAddHandle = $CombineDelegates(this.OnLogAddHandle, value);
        },
        remove_OnLogAddHandle: function (value)
        {
            this.OnLogAddHandle = $RemoveDelegate(this.OnLogAddHandle, value);
        },
        AddLog: function (item)
        {
            if (this.get_BindObject() == null)
                return;
            if (OpLog.OpConfig.get_Instance().get_LogListOff())
            {
                item.set_Ts(OpLog.OpFunction.GetLogTime());
                if (this.OnLogAddHandle != null)
                {
                    this.OnLogAddHandle(this.get_RId(), item);
                }
            }
            else
            {
                if (this._items == null)
                {
                    OpLog.OpLogSourceBind.logger.Debug$$String("_item Is Null On Add Log!!!");
                    return;
                }
                item.set_Ts(OpLog.OpFunction.GetLogTime());
                this._items.Add(item);
                if (OpLog.OpConfig.get_Instance().get_LogOn())
                    OpLog.OpLogSourceBind.logger.Trace$$String$$Object$Array("Add Log :{0}", OpLog.Exctions.ToJson(item));
                if (this.OnLogAddHandle != null)
                {
                    this.OnLogAddHandle(this.get_RId(), item);
                }
            }
        },
        GetSyncData: function ()
        {
            var last = null;
            if (this._items != null && this._items.get_Count() > 0)
                last = this._items.Last();
            var oplog = OpLog.OpChangeItem.New();
            oplog.set_Op(OpLog.Op.Sync);
            oplog.set_RId(this.get_RId());
            oplog.set_Ts(last == null ? OpLog.OpFunction.GetLogTime() : last.get_Ts());
            oplog.set_OpStr(this.get_BindObject());
            return [oplog];
        },
        GetChangeData: function (syncts, rid, lv)
        {
            if (this.get_BindObject() == null)
                return null;
            if (rid != null && rid != this.get_BindObject().get_OpId())
            {
                throw $CreateException(new System.Exception.ctor$$String("ͬ���Ķ���ƥ��!"), new Error());
            }
            var mapchangeData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var maplistAddData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var maplistRemoveData = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
            if (syncts == 0)
            {
                return this.GetSyncData();
            }
            else
            {
                if (this._items.get_Count() == 0)
                    return null;
                var last = this._items.Last();
                if (last == null || last.get_Ts() <= syncts)
                    return null;
                var temp = new System.Collections.Generic.List$1.ctor(OpLog.OpChangeItem.ctor);
                var lastindex = this._items.FindLastIndex($CreateAnonymousDelegate(this, function (r)
                {
                    return r.get_Ts() == syncts;
                }));
                temp.AddRange(System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(OpLog.OpChangeItem.ctor, this._items.Dump$$Int32(lastindex + 1), $CreateAnonymousDelegate(this, function (r)
                {
                    return r.get_Lv() >= lv;
                })));
                var retList = OpLog.OpLogSourceBind.GetChangeDataByLog(temp, lv);
                if (OpLog.OpConfig.get_Instance().get_LogOn())
                    if (retList != null && retList.get_Count() > 0)
                    {
                        OpLog.OpLogSourceBind.logger.Debug$$String$$Object$Array("Sync by {0} {1} Ts: {2} --> {3}:\r\n{4}", this.get_BindObject(), this.get_RId(), syncts, OpLog.OpFunction.GeLastTs(), OpLog.Exctions.ToJson(retList));
                    }
                return retList.ToArray();
            }
        },
        Dispose: function ()
        {
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        Dispose$$Boolean: function (disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    if (this.OnDisposing != null)
                    {
                        this.OnDisposing(this, System.EventArgs.Empty);
                    }
                    this.set_BindObject(null);
                    if (this._items != null)
                        this._items.Clear();
                    this._items = null;
                    if (this.subSourceMap != null)
                    {
                        var $it15 = this.subSourceMap.get_Keys().GetEnumerator();
                        while ($it15.MoveNext())
                        {
                            var key = $it15.get_Current();
                            var source = null;
                            (function ()
                            {
                                var $1 = {Value: source};
                                var $res = this.subSourceMap.TryGetValue(key, $1);
                                source = $1.Value;
                                return $res;
                            }).call(this);
                            this.subSourceMap.Remove(key);
                            if (source != null)
                                source.Dispose();
                        }
                        this.subSourceMap.Clear();
                    }
                    this.subSourceMap = null;
                    this.set_RootSource(null);
                    this.OnDisposing = null;
                    this.OnLogAddHandle = null;
                    this.OnOpItemSearch = null;
                }
            }
            this.disposed = true;
        },
        TestSource: function ()
        {
            return true;
        },
        add_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $CombineDelegates(this.OnOpItemSearch, value);
        },
        remove_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $RemoveDelegate(this.OnOpItemSearch, value);
        },
        DoOpItemSearch: function (itemSearch)
        {
            if (itemSearch.get_IsMatch())
                return itemSearch.get_IsMatch();
            if (itemSearch.get_RId() == this.get_BindObject().get_OpId())
            {
                itemSearch.set_IsMatch(true);
            }
            if (!itemSearch.get_IsMatch())
                if (this.OnOpItemSearch != null)
                    this.OnOpItemSearch(itemSearch);
            return itemSearch.get_IsMatch();
        }
    }
};
JsTypes.push(OpLog$OpLogSourceBind);
var OpLog$OpLogSourceBind$OpLogListSourceBind =
 {
    fullname: "OpLog.OpLogSourceBind.OpLogListSourceBind",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function (ns, bind, root)
        {
            this._Ns = null;
            this._SourceBind = null;
            this._Root = null;
            System.Object.ctor.call(this);
            this.set_Ns(ns);
            this.set_SourceBind(bind);
            this.set_Root(root);
        },
        Ns$$: "System.String",
        get_Ns: function ()
        {
            return this._Ns;
        },
        set_Ns: function (value)
        {
            this._Ns = value;
        },
        SourceBind$$: "OpLog.OpLogSourceBind",
        get_SourceBind: function ()
        {
            return this._SourceBind;
        },
        set_SourceBind: function (value)
        {
            this._SourceBind = value;
        },
        Root$$: "OpLog.IOpItem",
        get_Root: function ()
        {
            return this._Root;
        },
        set_Root: function (value)
        {
            this._Root = value;
        },
        OpLogBind_PropertyChanged: function (sender, e)
        {
            if (Is(sender, OpLog.IOpItem.ctor))
            {
                var oplog = OpLog.OpChangeItem.New();
                oplog.set_OId((As(sender, OpLog.IOpItem.ctor)).get_OpId());
                oplog.set_OpStr(sender);
                oplog.set_BindObject(sender);
                oplog.set_RId(this.get_Root().get_OpId());
                if (e.get_PropertyName() == "add")
                {
                    oplog.set_Op(OpLog.Op.Inster);
                }
                else
                {
                    oplog.set_Op(OpLog.Op.Delete);
                }
                oplog.set_Ns(this.get_Ns());
                oplog.set_Lv(this.get_SourceBind().get_LogSourceBindLv());
                this.get_SourceBind().AddLog(oplog);
                if (this.get_SourceBind().get_BindObject() != null != null && Is(this.get_SourceBind().get_BindObject(), OpLog.IBubbleNotifyChangeEvent.ctor))
                {
                    (As(this.get_SourceBind().get_BindObject(), OpLog.IBubbleNotifyChangeEvent.ctor)).DoPropertyChanged(sender, e);
                }
                if (Is(sender, OpLog.IOpItem.ctor))
                {
                    if (oplog.get_Op() == OpLog.Op.Inster)
                    {
                        this.get_SourceBind().BindSubSource(As(sender, OpLog.IOpItem.ctor), this.get_SourceBind(), this.get_SourceBind().get_LogSourceBindLv());
                    }
                    else
                    {
                        this.get_SourceBind().UnBindSubSource(As(sender, OpLog.IOpItem.ctor));
                    }
                }
            }
        }
    }
};
JsTypes.push(OpLog$OpLogSourceBind$OpLogListSourceBind);
var OpLog$OpLogSourceBind$SubChangeitem =
 {
    fullname: "OpLog.OpLogSourceBind.SubChangeitem",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Name = null;
            this._Ts = 0;
            this._Value = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        Ts$$: "System.Int64",
        get_Ts: function ()
        {
            return this._Ts;
        },
        set_Ts: function (value)
        {
            this._Ts = value;
        },
        Value$$: "System.Object",
        get_Value: function ()
        {
            return this._Value;
        },
        set_Value: function (value)
        {
            this._Value = value;
        }
    }
};
JsTypes.push(OpLog$OpLogSourceBind$SubChangeitem);
var OpLog$OpLogSourceBindLoader =
 {
    fullname: "OpLog.OpLogSourceBindLoader",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    interfaceNames: ["System.IDisposable", "OpLog.IOpLogSource"],
    Kind: "Class",
    definition:
    {
        ctor: function (source)
        {
            this._Source = null;
            this.OnDisposing = null;
            this.OnOpItemSearch = null;
            this._Lv = OpLog.SourceBindLv.VeryHig;
            System.Object.ctor.call(this);
            this.set_Source(source);
            this.get_Source().add_OnDisposing($CreateDelegate(this, this.Source_OnDisposing));
        },
        Source$$: "OpLog.IOpLogSource",
        get_Source: function ()
        {
            return this._Source;
        },
        set_Source: function (value)
        {
            if (this._Source != value)
            {
                this._Source = value;
                this._Source.add_OnDisposing($CreateDelegate(this, this.Source_OnDisposing));
            }
        },
        Lv$$: "OpLog.SourceBindLv",
        get_Lv: function ()
        {
            return this._Lv;
        },
        set_Lv: function (value)
        {
            this._Lv = value;
        },
        Source_OnDisposing: function (sender, e)
        {
            if (this.OnDisposing != null)
                this.OnDisposing(sender, e);
        },
        GetChangeData: function (syncts, rid, lv)
        {
            return this.get_Source().GetChangeData(syncts, rid, this.get_Lv());
        },
        TestSource: function ()
        {
            return this.get_Source().TestSource();
        },
        add_OnDisposing: function (value)
        {
            this.OnDisposing = $CombineDelegates(this.OnDisposing, value);
        },
        remove_OnDisposing: function (value)
        {
            this.OnDisposing = $RemoveDelegate(this.OnDisposing, value);
        },
        SourceOk$$: "System.Boolean",
        get_SourceOk: function ()
        {
            return this.get_Source().get_SourceOk();
        },
        Dispose: function ()
        {
            if (this.OnDisposing != null)
                this.OnDisposing(this, System.EventArgs.Empty);
        },
        add_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $CombineDelegates(this.OnOpItemSearch, value);
        },
        remove_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $RemoveDelegate(this.OnOpItemSearch, value);
        },
        DoOpItemSearch: function (itemSearch)
        {
            return this.get_Source().DoOpItemSearch(itemSearch);
        }
    }
};
JsTypes.push(OpLog$OpLogSourceBindLoader);
var OpLog$OpNodeChangeItem =
 {
    fullname: "OpLog.OpNodeChangeItem",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Rid = null;
            this._SubItem = null;
            System.Object.ctor.call(this);
        },
        Rid$$: "System.String",
        get_Rid: function ()
        {
            return this._Rid;
        },
        set_Rid: function (value)
        {
            this._Rid = value;
        },
        SubItem$$: "OpLog.OpChangeItem",
        get_SubItem: function ()
        {
            return this._SubItem;
        },
        set_SubItem: function (value)
        {
            this._SubItem = value;
        }
    }
};
JsTypes.push(OpLog$OpNodeChangeItem);
var OpLog$IOpItem = {fullname: "OpLog.IOpItem", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.ComponentModel.INotifyPropertyChanged"], Kind: "Interface"};
JsTypes.push(OpLog$IOpItem);
var OpLog$IOpTagObj = {fullname: "OpLog.IOpTagObj", baseTypeName: "System.Object", assemblyName: "NodeLog", Kind: "Interface"};
JsTypes.push(OpLog$IOpTagObj);
var OpLog$RootOpObject =
 {
    fullname: "OpLog.RootOpObject",
    baseTypeName: "OpLog.OpObject",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor$$String: function (opid)
        {
            OpLog.OpObject.ctor.call(this);
            this.set_OpId(opid);
        },
        ctor: function ()
        {
            OpLog.OpObject.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$RootOpObject);
var OpLog$ICanSetOpObject = {fullname: "OpLog.ICanSetOpObject", baseTypeName: "System.Object", assemblyName: "NodeLog", Kind: "Interface"};
JsTypes.push(OpLog$ICanSetOpObject);
var OpLog$IBubbleNotifyChangeEvent = {fullname: "OpLog.IBubbleNotifyChangeEvent", baseTypeName: "System.Object", assemblyName: "NodeLog", Kind: "Interface"};
JsTypes.push(OpLog$IBubbleNotifyChangeEvent);
var OpLog$OpObject =
 {
    fullname: "OpLog.OpObject",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    interfaceNames: ["OpLog.IOpItem", "OpLog.INotifyDisposable", "OpLog.ICanSetOpObject"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.disposed = false;
            this.PropertyChanged = null;
            this.OnDispose = null;
            this._OpId = null;
            System.Object.ctor.call(this);
            this.set_OpId(OpLog.OpFunction.GetNewId());
        },
        OnSetMaster: function ()
        {
        },
        add_PropertyChanged: function (value)
        {
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value)
        {
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        OpId$$: "System.String",
        get_OpId: function ()
        {
            return this._OpId;
        },
        set_OpId: function (value)
        {
            this._OpId = value;
        },
        OnPropertyChanged: function (propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs.ctor(propertyName));
            }
        },
        add_OnDispose: function (value)
        {
            this.OnDispose = $CombineDelegates(this.OnDispose, value);
        },
        remove_OnDispose: function (value)
        {
            this.OnDispose = $RemoveDelegate(this.OnDispose, value);
        },
        Dispose: function ()
        {
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        ReleaseManagedResources: function ()
        {
            this.PropertyChanged = null;
        },
        ReleaseUnmanagedResources: function ()
        {
        },
        Dispose$$Boolean: function (disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    this.ReleaseManagedResources();
                }
                this.ReleaseUnmanagedResources();
            }
            if (this.OnDispose != null)
                this.OnDispose();
            this.disposed = true;
        }
    }
};
JsTypes.push(OpLog$OpObject);
var OpLog$INotifyDisposable = {fullname: "OpLog.INotifyDisposable", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.IDisposable"], Kind: "Interface"};
JsTypes.push(OpLog$INotifyDisposable);
var OpLog$IUnNotifyDisposable = {fullname: "OpLog.IUnNotifyDisposable", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.IDisposable"], Kind: "Interface"};
JsTypes.push(OpLog$IUnNotifyDisposable);
var OpLog$EmptyItem =
 {
    fullname: "OpLog.EmptyItem",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    interfaceNames: ["OpLog.IOpItem"],
    Kind: "Class",
    definition:
    {
        ctor: function (id)
        {
            this.PropertyChanged = null;
            this._OpId = null;
            System.Object.ctor.call(this);
            this.set_OpId(id);
        },
        add_PropertyChanged: function (value)
        {
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value)
        {
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        OpId$$: "System.String",
        get_OpId: function ()
        {
            return this._OpId;
        },
        set_OpId: function (value)
        {
            this._OpId = value;
        }
    }
};
JsTypes.push(OpLog$EmptyItem);
var OpLog$OnLogAddHandle =
 {
    fullname: "OpLog.OnLogAddHandle",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OnLogAddHandle);
var OpLog$IOpLogSource = {fullname: "OpLog.IOpLogSource", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.IDisposable"], Kind: "Interface"};
JsTypes.push(OpLog$IOpLogSource);
var OpLog$IOpRemoteLogSource = {fullname: "OpLog.IOpRemoteLogSource", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["OpLog.IOpLogSource"], Kind: "Interface"};
JsTypes.push(OpLog$IOpRemoteLogSource);
var OpLog$IOpLogSyncBind = {fullname: "OpLog.IOpLogSyncBind", baseTypeName: "System.Object", assemblyName: "NodeLog", interfaceNames: ["System.IDisposable", "System.ComponentModel.INotifyPropertyChanged"], Kind: "Interface"};
JsTypes.push(OpLog$IOpLogSyncBind);
var OpLog$JavaScriptSerializer =
 {
    fullname: "OpLog.JavaScriptSerializer",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        SerializeToJson: function (jsonObject)
        {
            return Lib.fastJSON.JSON.get_Instance().ToJSON$$Object(jsonObject);
        },
        DeserializeFromJsonStr$1: function (T, json)
        {
            return Lib.fastJSON.JSON.get_Instance().ToObject$1$$String(T, json);
        },
        Deserialize$1$$String: function (T, json)
        {
            return OpLog.JavaScriptSerializer.DeserializeFromJsonStr$1(T, json);
        },
        Deserialize$1$$Object: function (T, json)
        {
            if (Is(json, System.Collections.Generic.Dictionary$2.ctor))
            {
                return OpLog.JavaScriptSerializer.DeserializeFromJsonStr$1(T, OpLog.JavaScriptSerializer.SerializeToJson(json));
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Deserialize$$Object$$Type: function (json, type)
        {
            if (Is(json, System.Collections.Generic.Dictionary$2.ctor))
            {
                return OpLog.JavaScriptSerializer.Deserialize$$String$$Type(OpLog.JavaScriptSerializer.SerializeToJson(json), type);
            }
            if (json.GetType() == type)
            {
                return json;
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Serialize: function (jsonObject)
        {
            return OpLog.JavaScriptSerializer.SerializeToJson(jsonObject);
        },
        Deserialize$$String$$Type: function (json, type)
        {
            return Lib.fastJSON.JSON.get_Instance().ToObject$$String$$Type(json, type);
        },
        ContainsKey: function (opData, name)
        {
            if (Is(opData, System.Collections.Generic.Dictionary$2.ctor))
            {
                return (As(opData, System.Collections.Generic.Dictionary$2.ctor)).ContainsKey(name);
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$JavaScriptSerializer);
var OpLog$Exctions =
 {
    fullname: "OpLog.Exctions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        ToJson: function (o)
        {
            return OpLog.JavaScriptSerializer.Serialize(o);
        },
        ToObject$1: function (T, json)
        {
            return OpLog.JavaScriptSerializer.Deserialize$1$$String(T, json);
        },
        GetPropertys: function (o)
        {
            if (Is(o, System.Type.ctor))
            {
                return (As(o, System.Type.ctor)).GetProperties();
            }
            return o.GetType().GetProperties();
        },
        GetProperty: function (o, pname)
        {
            return o.GetType().GetProperty$$String(pname);
        },
        GetValue: function (o, name)
        {
            if (Is(o, System.Reflection.PropertyInfo.ctor))
            {
                var pinfo = As(o, System.Reflection.PropertyInfo.ctor);
                return pinfo.GetValue$$Object$$Object$Array(o, null);
            }
            if (true)
            {
                var pinfo = o.GetType().GetProperty$$String(name);
                return pinfo.GetValue$$Object$$Object$Array(o, null);
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        GetPropertyValue: function (o, bind)
        {
            return o.GetValue$$Object$$Object$Array(bind, null);
        },
        SetPropertyValue: function (o, bind, value)
        {
            o.SetValue$$Object$$Object$$Object$Array(bind, value, null);
        },
        IsDefined$1: function (T, o, inner)
        {
            if (Is(o, System.Reflection.PropertyInfo.ctor))
            {
                return (As(o, System.Reflection.PropertyInfo.ctor)).IsDefined(Typeof(T), inner);
            }
            else if (Is(o, System.Type.ctor))
            {
                return (As(o, System.Type.ctor)).IsDefined(Typeof(T), inner);
            }
            else
            {
                return OpLog.Exctions.IsDefined$1(T, o.GetType(), inner);
            }
        },
        GetCustomAttribute$1: function (T, o, inner)
        {
            var items = new Array(0);
            if (Is(o, System.Reflection.PropertyInfo.ctor))
            {
                items = (As(o, System.Reflection.PropertyInfo.ctor)).GetCustomAttributes$$Type$$Boolean(Typeof(T), inner);
            }
            else if (Is(o, System.Type.ctor))
            {
                items = (As(o, System.Type.ctor)).GetCustomAttributes$$Type$$Boolean(Typeof(T), inner);
            }
            else
            {
                return OpLog.Exctions.GetCustomAttribute$1(T, o.GetType(), inner);
            }
            var list = new System.Collections.Generic.List$1.ctor(T);
            for (var $i17 = 0, $l17 = items.length, item = items[$i17]; $i17 < $l17; $i17++, item = items[$i17])
            {
                list.Add(item);
            }
            return list.ToArray();
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$Exctions);
var OpLog$Op =
 {
    fullname: "OpLog.Op",
    staticDefinition: {Sync: 0, Update: 1, Inster: 2, Delete: 3, Template: 100},
    Kind: "Enum"
};
JsTypes.push(OpLog$Op);
var OpLog$OpChangeItem =
 {
    fullname: "OpLog.OpChangeItem",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        New: function ()
        {
            return new OpLog.OpChangeItem.ctor();
        }
    },
    assemblyName: "NodeLog",
    interfaceNames: ["System.IDisposable"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._opStr = null;
            this._bindObjectReference = null;
            this.disposed = false;
            this._Op = OpLog.Op.Sync;
            this._Ts = 0;
            this._Ns = null;
            this._RId = null;
            this._OId = null;
            this._IsLocal = false;
            this._IsMatch = false;
            this._Lv = 0;
            System.Object.ctor.call(this);
        },
        Op$$: "OpLog.Op",
        get_Op: function ()
        {
            return this._Op;
        },
        set_Op: function (value)
        {
            this._Op = value;
        },
        SOp$$: "System.String",
        get_SOp: function ()
        {
            return this.get_Op().toString();
        },
        Ts$$: "System.Int64",
        get_Ts: function ()
        {
            return this._Ts;
        },
        set_Ts: function (value)
        {
            this._Ts = value;
        },
        Ns$$: "System.String",
        get_Ns: function ()
        {
            return this._Ns;
        },
        set_Ns: function (value)
        {
            this._Ns = value;
        },
        RId$$: "System.String",
        get_RId: function ()
        {
            return this._RId;
        },
        set_RId: function (value)
        {
            this._RId = value;
        },
        OId$$: "System.String",
        get_OId: function ()
        {
            return this._OId;
        },
        set_OId: function (value)
        {
            this._OId = value;
        },
        OpStr$$: "System.Object",
        get_OpStr: function ()
        {
            if (this._opStr != null && this._opStr.get_IsAlive())
            {
                return this._opStr.get_Target();
            }
            return null;
        },
        set_OpStr: function (value)
        {
            this._opStr = new System.WeakReference.ctor$$Object(value);
        },
        BindObject$$: "System.Object",
        get_BindObject: function ()
        {
            if (this._bindObjectReference != null && this._bindObjectReference.get_IsAlive())
            {
                return this._bindObjectReference.get_Target();
            }
            return null;
        },
        set_BindObject: function (value)
        {
            this._bindObjectReference = new System.WeakReference.ctor$$Object(value);
        },
        IsLocal$$: "System.Boolean",
        get_IsLocal: function ()
        {
            return this._IsLocal;
        },
        set_IsLocal: function (value)
        {
            this._IsLocal = value;
        },
        IsMatch$$: "System.Boolean",
        get_IsMatch: function ()
        {
            return this._IsMatch;
        },
        set_IsMatch: function (value)
        {
            this._IsMatch = value;
        },
        Lv$$: "System.Int32",
        get_Lv: function ()
        {
            return this._Lv;
        },
        set_Lv: function (value)
        {
            this._Lv = value;
        },
        toString: function ()
        {
            return System.String.Format$$String$$Object$Array("[{0}}:{1} {2}{3}", [this.get_Op(), this.get_RId(), this.get_OpStr(), this.get_OId()]);
        },
        Dispose: function ()
        {
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        Dispose$$Boolean: function (disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    this.set_Ns((function ($p1)
                    {
                        this.set_RId($p1);
                        return $p1;
                    }).call(this, null));
                    this.set_OpStr(null);
                    this.set_Op(OpLog.Op.Sync);
                    this.set_Lv(0);
                    this.set_IsMatch(false);
                    this.set_IsLocal(false);
                    this._bindObjectReference = null;
                    this.set_Ts(0);
                }
            }
            this.disposed = true;
        }
    }
};
JsTypes.push(OpLog$OpChangeItem);
var OpLog$OpFunction =
 {
    fullname: "OpLog.OpFunction",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GeLastTs: function ()
        {
            if (OpLog.OpFunction.lastTs == 0)
            {
                return OpLog.OpFunction.GetTime();
            }
            return OpLog.OpFunction.lastTs;
        },
        GetLogTime: function ()
        {
            var ts = OpLog.OpFunction.GetTime() * OpLog.OpConfig.get_Instance().get_TimeFix();
            if (!OpLog.OpConfig.get_Instance().get_UserTs())
            {
                if (OpLog.OpConfig.get_Instance().get_TimeFix() != 2147483647)
                    OpLog.OpConfig.get_Instance().set_TimeFix(2147483647);
            }
            if (OpLog.OpFunction.lastTs >= ts)
            {
                OpLog.OpFunction.subTs++;
                ts += OpLog.OpFunction.subTs;
                OpLog.OpFunction.lastTs = ts;
                if (OpLog.OpConfig.get_Instance().get_TimeFix() > 1 && OpLog.OpFunction.subTs > OpLog.OpConfig.get_Instance().get_TimeFix())
                {
                    OpLog.OpFunction.logger.Warn$$String("������󾫶���ֵ!" + OpLog.OpConfig.get_Instance().get_TimeFix());
                }
            }
            else
            {
                OpLog.OpFunction.lastTs = ts;
                OpLog.OpFunction.subTs = 0;
            }
            return ts;
        },
        GetTime: function ()
        {
            if (!OpLog.OpConfig.get_Instance().get_UserTs())
            {
                return 0;
            }
            var retval = 0;
            var st = new System.DateTime.ctor$$Int32$$Int32$$Int32(1970, 1, 1);
            var t = (System.DateTime.op_Subtraction$$DateTime$$DateTime(System.DateTime.get_Now().ToUniversalTime(), st));
            retval = Cast((t.get_TotalMilliseconds() + 0.5), System.Int64.ctor);
            return retval;
        },
        GetBigTime: function ()
        {
            var retval = 0;
            var st = new System.DateTime.ctor$$Int32$$Int32$$Int32(1970, 1, 1);
            var t = (System.DateTime.op_Subtraction$$DateTime$$DateTime(System.DateTime.get_Now().AddDays(-1).get_Date(), st));
            retval = Cast((t.get_TotalMilliseconds() + 0.5), System.Int64.ctor);
            return retval;
        },
        ToShort: function (value)
        {
            if (value > 2147483647)
            {
                value -= OpLog.OpFunction.GetBigTime();
            }
            return value;
        },
        ToLong: function (value)
        {
            if (value < 2147483647)
            {
                return value + OpLog.OpFunction.GetBigTime();
            }
            return value;
        },
        BuildObject: function (obj)
        {
            return obj;
        },
        UserGuid$$: "System.Boolean",
        get_UserGuid: function ()
        {
            return OpLog.OpFunction._UserGuid;
        },
        set_UserGuid: function (value)
        {
            OpLog.OpFunction._UserGuid = value;
        },
        GetNewSortId: function ()
        {
            OpLog.OpFunction.sortguidSeed++;
            if (OpLog.OpFunction.sortguidSeed >= OpLog.OpFunction.maxsortguidSeed)
            {
                OpLog.OpFunction.sortguidSeed = new System.Random.ctor$$Int32(System.Guid.NewGuid().GetHashCode()).Next$$Int32$$Int32(1000, OpLog.OpFunction.maxsortguidSeed);
            }
            return OpLog.OpFunction.sortguidSeed.toString();
        },
        GetNewId: function ()
        {
            OpLog.OpFunction.guidSeed++;
            return OpLog.OpFunction.guidSeed.toString();
        },
        NewGuid: function ()
        {
            return System.Guid.NewGuid().toString();
        },
        IsSetMaster: function (opitem)
        {
            return OpLog.OpLogManager.get_Default().ContainsSource(opitem.get_OpId());
        },
        MasterSize: function ()
        {
            return OpLog.OpLogManager.get_Default().MasterSize();
        },
        add_OnChangeMasterStatueEvent: function (value)
        {
            this.OnChangeMasterStatueEvent = $CombineDelegates(this.OnChangeMasterStatueEvent, value);
        },
        remove_OnChangeMasterStatueEvent: function (value)
        {
            this.OnChangeMasterStatueEvent = $RemoveDelegate(this.OnChangeMasterStatueEvent, value);
        },
        SetMaster: function (opitem)
        {
            if (OpLog.OpFunction.IsSetMaster(opitem))
            {
                return;
            }
            if (Is(opitem, OpLog.OpObject.ctor))
            {
                (As(opitem, OpLog.OpObject.ctor)).OnSetMaster();
            }
            var source = OpLog.OpLogManager.get_Default().SourceBind(opitem);
            source.add_OnLogAddHandle(OpLog.OpFunction.source_OnLogAddHandle);
            if (Is(opitem, OpLog.INotifyDisposable.ctor))
            {
                (As(opitem, OpLog.INotifyDisposable.ctor)).add_OnDispose(function ()
                {
                    OpLog.OpLogManager.get_Default().DisposeSorce(opitem);
                    OpLog.OpFunction.AutoPushListLock = true;
                    OpLog.OpFunction.AutoPushList.Remove(opitem.get_OpId());
                    OpLog.OpFunction.AutoPushListLock = false;
                    if (OpLog.OpFunction.OnChangeMasterStatueEvent != null)
                    {
                        OpLog.OpFunction.OnChangeMasterStatueEvent(opitem, false);
                    }
                });
            }
            OpLog.OpFunction.AutoPushListLock = true;
            var pitem = (function ()
            {
                var $v7 = new OpLog.OpFunction.PushItem.ctor();
                $v7.set_OpId(opitem.get_OpId());
                return $v7;
            })();
            if (Is(opitem, OpLog.IOpTagObj.ctor))
            {
                pitem.set_Tag((As(opitem, OpLog.IOpTagObj.ctor)).GetTag());
            }
            OpLog.OpFunction.AutoPushList.Add(opitem.get_OpId(), pitem);
            OpLog.OpFunction.AutoPushListLock = false;
            if (OpLog.OpFunction.OnChangeMasterStatueEvent != null)
            {
                OpLog.OpFunction.OnChangeMasterStatueEvent(opitem, true);
            }
        },
        add_OnLogAddHandle: function (value)
        {
            this.OnLogAddHandle = $CombineDelegates(this.OnLogAddHandle, value);
        },
        remove_OnLogAddHandle: function (value)
        {
            this.OnLogAddHandle = $RemoveDelegate(this.OnLogAddHandle, value);
        },
        add_OnLogChangeDataPush: function (value)
        {
            this.OnLogChangeDataPush = $CombineDelegates(this.OnLogChangeDataPush, value);
        },
        remove_OnLogChangeDataPush: function (value)
        {
            this.OnLogChangeDataPush = $RemoveDelegate(this.OnLogChangeDataPush, value);
        },
        GetChangeDataByLog: function (temp, lv)
        {
            return OpLog.OpLogSourceBind.GetChangeDataByLog(temp, lv);
        },
        cctor: function ()
        {
            OpLog.OpFunction.lastTs = 0;
            OpLog.OpFunction.subTs = 0;
            OpLog.OpFunction.logger = GameApp.Common.Logging.LogManager.CreateLogger();
            OpLog.OpFunction.LIST_ADD = "add";
            OpLog.OpFunction.LIST_DEL = "del";
            OpLog.OpFunction.guidSeed = 10001;
            OpLog.OpFunction.maxsortguidSeed = 9000;
            OpLog.OpFunction.sortguidSeed = 9000;
            OpLog.OpFunction.pushThread = null;
            OpLog.OpFunction._pushVer = 0;
            OpLog.OpFunction._lastpushVer = 0;
            OpLog.OpFunction.AutoPushList = new System.SafeDictionary$2.ctor(System.String.ctor, OpLog.OpFunction.PushItem.ctor);
            OpLog.OpFunction.AutoPushListLock = false;
            OpLog.OpFunction.OnChangeMasterStatueEvent = null;
            OpLog.OpFunction.OnLogAddHandle = null;
            OpLog.OpFunction.OnLogChangeDataPush = null;
            OpLog.OpFunction.OnOtherSourceFind = null;
            OpLog.OpFunction._UserGuid = false;
            OpLog.OpFunction.pushThread = (function ()
            {
                var $v8 = new GameApp.Common.SyncThread.ctor();
                $v8.set_Name("AutoPush");
                $v8.set_Tag(OpLog.OpFunction.AutoPushList);
                return $v8;
            })();
            OpLog.OpFunction.pushThread.add_OnSync(OpLog.OpFunction.pushThread_OnSync);
            OpLog.OpFunction.pushThread.add_OnCheck(OpLog.OpFunction.pushThread_OnCheck);
            OpLog.OpFunction.pushThread.set_Sleep(OpLog.OpConfig.get_Instance().get_AutoPushSleep());
            if (OpLog.OpConfig.get_Instance().get_AutoPushOn())
                OpLog.OpFunction.pushThread.Start();
        },
        pushThread_OnCheck: function (arg)
        {
            return OpLog.OpFunction._lastpushVer != OpLog.OpFunction._pushVer;
        },
        pushThread_OnSync: function ()
        {
            OpLog.OpFunction._lastpushVer = OpLog.OpFunction._pushVer;
            var list;
            OpLog.OpFunction.AutoPushListLock = true;
            list = System.Linq.Enumerable.ToArray$1(System.Collections.Generic.KeyValuePair$2.ctor, OpLog.OpFunction.AutoPushList);
            OpLog.OpFunction.AutoPushListLock = false;
            for (var $i18 = 0, $l18 = list.length, pushItem = list[$i18]; $i18 < $l18; $i18++, pushItem = list[$i18])
            {
                if (pushItem.get_Value() != null && pushItem.get_Value().get_Count() > 0)
                {
                    var ret = OpLog.OpFunction.GetChangeDataByLog(pushItem.get_Value().GetItems(), 0);
                    if (OpLog.OpFunction.OnLogChangeDataPush != null)
                        OpLog.OpFunction.OnLogChangeDataPush(pushItem.get_Key(), ret, pushItem.get_Value().get_Tag());
                    if (OpLog.OpConfig.get_Instance().get_LogListOff())
                    {
                        var $it18 = ret.GetEnumerator();
                        while ($it18.MoveNext())
                        {
                            var opChangeItem = $it18.get_Current();
                            opChangeItem.Dispose();
                        }
                    }
                }
            }
        },
        source_OnLogAddHandle: function (opid, item)
        {
            if (!OpLog.OpConfig.get_Instance().get_AutoPushOn())
                return;
            if (OpLog.OpFunction.OnLogAddHandle != null)
                OpLog.OpFunction.OnLogAddHandle(opid, item);
            if (!OpLog.OpFunction.AutoPushList.ContainsKey(opid))
                return;
            if (OpLog.OpFunction.AutoPushListLock)
            {
                OpLog.OpFunction.AutoPushList.get_Item$$TKey(opid).AddItem(item);
            }
            else
            {
                OpLog.OpFunction.AutoPushList.get_Item$$TKey(opid).AddItem(item);
            }
            OpLog.OpFunction._pushVer++;
        },
        add_OnOtherSourceFind: function (value)
        {
            this.OnOtherSourceFind = $CombineDelegates(this.OnOtherSourceFind, value);
        },
        remove_OnOtherSourceFind: function (value)
        {
            this.OnOtherSourceFind = $RemoveDelegate(this.OnOtherSourceFind, value);
        },
        GetChangeData: function (syncts, rid)
        {
            var sc = OpLog.OpLogManager.get_Default().FindSource(rid, OpLog.SourceBindLv.VeryHig);
            if (OpLog.OpFunction.OnOtherSourceFind != null)
            {
                sc = OpLog.OpFunction.OnOtherSourceFind(rid);
            }
            if (sc != null)
            {
                for (var i = 0; i < (OpLog.OpConfig.get_Instance().get_RequestWatingMs() <= 0 ? 1 : OpLog.OpConfig.get_Instance().get_RequestWatingMs()); i++)
                {
                    var ret = sc.GetChangeData(syncts, rid, 0);
                    if (ret != null)
                        return ret;
                    if (OpLog.OpConfig.get_Instance().get_RequestWatingMs() > 0)
                        System.Threading.Thread.Sleep$$Int32(1);
                }
            }
            else
            {
                throw $CreateException(new System.Exception.ctor$$String("δ�ҵ���Ӧ�İ���!"), new Error());
            }
            return null;
        },
        PrintTime: function (str)
        {
            var oTime = System.DateTime.get_Now();
            var strTime = System.String.Format$$String$$Object$$Object("{0:yyyy-MM-dd HH:mm:ss}.{1:000} ", oTime, oTime.get_Millisecond());
            System.Console.WriteLine$$String(strTime + str);
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$OpFunction);
var OpLog$OpFunction$OnChangeMasterStatueHandle =
 {
    fullname: "OpLog.OpFunction.OnChangeMasterStatueHandle",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OpFunction$OnChangeMasterStatueHandle);
var OpLog$OpFunction$PushItem =
 {
    fullname: "OpLog.OpFunction.PushItem",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._lock = new System.Object.ctor();
            this.isLock = false;
            this._OpId = null;
            this._LastPush = System.DateTime.MinValue;
            this._Tag = null;
            this._Items = null;
            System.Object.ctor.call(this);
            this.set_LastPush(System.DateTime.get_Now());
            this.set_Items(new System.Collections.Generic.List$1.ctor(OpLog.OpChangeItem.ctor));
        },
        OpId$$: "System.String",
        get_OpId: function ()
        {
            return this._OpId;
        },
        set_OpId: function (value)
        {
            this._OpId = value;
        },
        LastPush$$: "System.DateTime",
        get_LastPush: function ()
        {
            return this._LastPush;
        },
        set_LastPush: function (value)
        {
            this._LastPush = value;
        },
        Tag$$: "System.Object",
        get_Tag: function ()
        {
            return this._Tag;
        },
        set_Tag: function (value)
        {
            this._Tag = value;
        },
        Items$$: "System.Collections.Generic.List`1[[OpLog.OpChangeItem]]",
        get_Items: function ()
        {
            return this._Items;
        },
        set_Items: function (value)
        {
            this._Items = value;
        },
        Count$$: "System.Int32",
        get_Count: function ()
        {
            return this.get_Items().get_Count();
        },
        AddItem: function (item)
        {
            this.set_LastPush(System.DateTime.get_Now());
            if (this.isLock)
            {
                this.get_Items().Add(item);
            }
            else
            {
                this.get_Items().Add(item);
            }
        },
        GetItems: function ()
        {
            this.isLock = true;
            var items = System.Linq.Enumerable.ToList$1(OpLog.OpChangeItem.ctor, this.get_Items());
            this.get_Items().Clear();
            this.isLock = false;
            return items;
        }
    }
};
JsTypes.push(OpLog$OpFunction$PushItem);
var OpLog$OpFunction$OnLogChangePushDataHandle =
 {
    fullname: "OpLog.OpFunction.OnLogChangePushDataHandle",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OpFunction$OnLogChangePushDataHandle);
var OpLog$OpFunction$OtherSourceHandle =
 {
    fullname: "OpLog.OpFunction.OtherSourceHandle",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OpFunction$OtherSourceHandle);
var OpLog$OnOplogSyncHandler =
 {
    fullname: "OpLog.OnOplogSyncHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OnOplogSyncHandler);
var OpLog$OpItemSearch =
 {
    fullname: "OpLog.OpItemSearch",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._RId = null;
            this._IsMatch = false;
            System.Object.ctor.call(this);
        },
        RId$$: "System.String",
        get_RId: function ()
        {
            return this._RId;
        },
        set_RId: function (value)
        {
            this._RId = value;
        },
        IsMatch$$: "System.Boolean",
        get_IsMatch: function ()
        {
            return this._IsMatch;
        },
        set_IsMatch: function (value)
        {
            this._IsMatch = value;
        }
    }
};
JsTypes.push(OpLog$OpItemSearch);
var OpLog$OpItemSearchHandler =
 {
    fullname: "OpLog.OpItemSearchHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(OpLog$OpItemSearchHandler);
var OpLog$OpLogSyncBind =
 {
    fullname: "OpLog.OpLogSyncBind",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Build: function (dest, source)
        {
            var type = Typeof(OpLog.OpLogSyncBind$1.ctor).MakeGenericType(dest.GetType());
            var ret = As(System.Activator.CreateInstance$$Type(type), OpLog.IOpLogSyncBind.ctor);
            ret.Init(dest, source);
            return ret;
        }
    },
    assemblyName: "NodeLog",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OpLog$OpLogSyncBind);
var OpLog$OpLogSyncBind$1 =
 {
    fullname: "OpLog.OpLogSyncBind$1",
    baseTypeName: "System.Object",
    assemblyName: "NodeLog",
    interfaceNames: ["System.IDisposable", "OpLog.IOpLogSyncBind", "System.ComponentModel.INotifyPropertyChanged"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this._Source = null;
            this._SyncTime = 0;
            this._lock = new System.Object.ctor();
            this.PropertyChanged = null;
            this.OnOplogSync = null;
            this.OnOplogSyncEnd = null;
            this.OnOpItemSearch = null;
            this._BindObject = null;
            System.Object.ctor.call(this);
        },
        BindObject$$: "OpLog.IOpItem",
        get_BindObject: function ()
        {
            return this._BindObject;
        },
        set_BindObject: function (value)
        {
            this._BindObject = value;
        },
        add_PropertyChanged: function (value)
        {
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value)
        {
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        RId$$: "System.String",
        get_RId: function ()
        {
            return this.get_BindObject().get_OpId();
        },
        Source$$: "OpLog.IOpLogSource",
        get_Source: function ()
        {
            return this._Source;
        },
        set_Source: function (value)
        {
            if (this._Source != value)
            {
                this._Source = value;
                if (this._Source != null)
                    this._Source.add_OnDisposing($CreateDelegate(this, this.Source_OnDisposing));
            }
        },
        SyncTime$$: "System.Int64",
        get_SyncTime: function ()
        {
            return this._SyncTime;
        },
        set_SyncTime: function (value)
        {
            if (this._SyncTime != value)
            {
                this._SyncTime = value;
                if (this.PropertyChanged != null)
                    this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs.ctor("SyncTime"));
            }
        },
        Init: function (bind, source)
        {
            this.set_BindObject(bind);
            this.set_Source(source);
            for (var $i20 = 0, $t20 = bind.GetType().GetProperties(), $l20 = $t20.length, pinfo = $t20[$i20]; $i20 < $l20; $i20++, pinfo = $t20[$i20])
            {
                if (pinfo.get_CanRead() && pinfo.get_CanWrite())
                {
                    var value = pinfo.GetValue$$Object$$Object$Array(bind, null);
                    if (Is(value, OpLog.IOpItem.ctor))
                    {
                        this.BindSubItem(As(value, OpLog.IOpItem.ctor), source);
                    }
                    if (Is(value, System.Collections.IList.ctor))
                    {
                        var $it20 = (As(value, System.Collections.IList.ctor)).GetEnumerator();
                        while ($it20.MoveNext())
                        {
                            var subitem = $it20.get_Current();
                            if (Is(subitem, OpLog.IOpItem.ctor))
                                this.BindSubItem(As(subitem, OpLog.IOpItem.ctor), source);
                        }
                    }
                }
            }
        },
        ctor$$IOpItem$$IOpLogSource: function (T, bind, source)
        {
            this.T = T;
            this._Source = null;
            this._SyncTime = 0;
            this._lock = new System.Object.ctor();
            this.PropertyChanged = null;
            this.OnOplogSync = null;
            this.OnOplogSyncEnd = null;
            this.OnOpItemSearch = null;
            this._BindObject = null;
            System.Object.ctor.call(this);
            this.Init(bind, source);
        },
        DoOpItemSearch: function (itemSearch)
        {
            if (!itemSearch.get_IsMatch())
            {
                itemSearch.set_IsMatch(itemSearch.get_RId() == this.get_RId());
            }
            if (!itemSearch.get_IsMatch())
                if (this.OnOpItemSearch != null)
                {
                    this.OnOpItemSearch(itemSearch);
                }
            return itemSearch.get_IsMatch();
        },
        BindSubItem: function (opitem, source)
        {
            var subBind = OpLog.OpLogSyncBind.Build(opitem, source);
            this.add_OnOplogSync($CreateDelegate(subBind, subBind.DoSync));
            subBind.add_OnOplogSyncEnd($CreateDelegate(this, this.NotifyOpLogSyncEnd));
            this.add_OnOpItemSearch($CreateDelegate(subBind, subBind.DoOpItemSearch));
        },
        Source_OnDisposing: function (sender, e)
        {
            this.Dispose();
        },
        DoSync: function (oplog)
        {
            if (oplog != null && oplog.get_RId() == this.get_BindObject().get_OpId())
            {
                oplog.set_IsMatch(true);
                if (oplog.get_Ts() >= this.get_SyncTime())
                {
                    this.set_SyncTime(oplog.get_Ts());
                    this.ReadOpLog$$OpChangeItem$$IOpLogSource(oplog, this.get_Source());
                }
                this.NotifyOpLogSyncEnd(this.get_BindObject(), System.EventArgs.Empty);
            }
            var oldMatch = oplog.get_IsMatch();
            if (this.OnOplogSync != null)
            {
                this.OnOplogSync(oplog);
            }
            if (oplog.get_IsMatch() && oldMatch == false)
            {
                this.NotifyOpLogSyncEnd(this.get_BindObject(), System.EventArgs.Empty);
            }
        },
        NotifyOpLogSyncEnd: function (sender, e)
        {
            if (this.OnOplogSyncEnd != null)
            {
                this.OnOplogSyncEnd(sender, e);
            }
        },
        add_OnOplogSync: function (value)
        {
            this.OnOplogSync = $CombineDelegates(this.OnOplogSync, value);
        },
        remove_OnOplogSync: function (value)
        {
            this.OnOplogSync = $RemoveDelegate(this.OnOplogSync, value);
        },
        add_OnOplogSyncEnd: function (value)
        {
            this.OnOplogSyncEnd = $CombineDelegates(this.OnOplogSyncEnd, value);
        },
        remove_OnOplogSyncEnd: function (value)
        {
            this.OnOplogSyncEnd = $RemoveDelegate(this.OnOplogSyncEnd, value);
        },
        add_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $CombineDelegates(this.OnOpItemSearch, value);
        },
        remove_OnOpItemSearch: function (value)
        {
            this.OnOpItemSearch = $RemoveDelegate(this.OnOpItemSearch, value);
        },
        SyncError: function ()
        {
            this.set_SyncTime(0);
        },
        Sync: function ()
        {
            if (this.get_BindObject() == null || this.get_Source() == null)
                return;
            if (!this.get_Source().get_SourceOk())
                return;
            try
            {
                var data = this.get_Source().GetChangeData(this.get_SyncTime(), this.get_BindObject().get_OpId(), 0);
                if (data == null || ((Is(data, System.String.ctor)) && data == ""))
                    return;
                var oplogs = null;
                if (Is(data, System.String.ctor))
                    oplogs = OpLog.JavaScriptSerializer.Deserialize$1$$String(System.Collections.Generic.List$1.ctor, As(data, System.String.ctor)).ToArray();
                else
                {
                    oplogs = As(data, Array);
                }
                for (var $i22 = 0, $l22 = oplogs.length, oplog = oplogs[$i22]; $i22 < $l22; $i22++, oplog = oplogs[$i22])
                {
                    this.DoSync(oplog);
                    if (oplog.get_IsMatch())
                        if (oplog.get_Ts() >= this.get_SyncTime())
                        {
                            this.set_SyncTime(oplog.get_Ts());
                        }
                }
            }
            finally
            {
            }
        },
        ReadOpLog$$OpChangeItem: function (oplog)
        {
            if (oplog.get_RId() == this.get_BindObject().get_OpId())
            {
                this.ReadOpLog$$OpChangeItem$$IOpLogSource(oplog, null);
            }
            var oldMatch = oplog.get_IsMatch();
            if (this.OnOplogSync != null)
            {
                this.OnOplogSync(oplog);
            }
            if (oplog.get_IsMatch() && oldMatch == false)
            {
                this.NotifyOpLogSyncEnd(this.get_BindObject(), System.EventArgs.Empty);
            }
        },
        ReadOpLog$$OpChangeItem$$IOpLogSource: function (oplog, source)
        {
            if (this.get_BindObject() == null)
            {
                System.Diagnostics.Debugger.Break();
            }
            switch (oplog.get_Op())
            {
                case OpLog.Op.Sync:
                    {
                        var obj = Default(this.T);
                        if (System.App.IsJs())
                        {
                            obj = oplog.get_OpStr();
                        }
                        else
                        {
                            if (Is(oplog.get_OpStr(), this.T))
                            {
                                obj = Cast(oplog.get_OpStr(), this.T);
                            }
                            else
                            {
                                obj = OpLog.JavaScriptSerializer.Deserialize$1$$Object(this.T, oplog.get_OpStr());
                            }
                        }
                        for (var $i23 = 0, $t23 = OpLog.Exctions.GetPropertys(obj), $l23 = $t23.length, pinfo = $t23[$i23]; $i23 < $l23; $i23++, pinfo = $t23[$i23])
                        {
                            if (pinfo.get_CanRead() && pinfo.get_CanWrite())
                            {
                                var value = OpLog.Exctions.GetPropertyValue(pinfo, obj);
                                if (Is(value, System.Collections.IList.ctor))
                                {
                                    var slist = As(OpLog.Exctions.GetPropertyValue(pinfo, this.get_BindObject()), System.Collections.IList.ctor);
                                    if (slist == null)
                                    {
                                        slist = As(System.Activator.CreateInstance$$Type(pinfo.get_PropertyType()), System.Collections.IList.ctor);
                                        OpLog.Exctions.SetPropertyValue(pinfo, this.get_BindObject(), slist);
                                    }
                                    slist.Clear();
                                    var $it23 = (As(value, System.Collections.IList.ctor)).GetEnumerator();
                                    while ($it23.MoveNext())
                                    {
                                        var subobj = $it23.get_Current();
                                        slist.Add(subobj);
                                        if (Is(subobj, OpLog.IOpItem.ctor))
                                            this.BindSubItem(As(subobj, OpLog.IOpItem.ctor), this.get_Source());
                                    }
                                }
                                else
                                {
                                    OpLog.Exctions.SetPropertyValue(pinfo, this.get_BindObject(), value);
                                }
                                if (Is(value, OpLog.IOpItem.ctor))
                                {
                                    this.BindSubItem(As(value, OpLog.IOpItem.ctor), source);
                                }
                            }
                        }
                    }
                    break;
                case OpLog.Op.Update:
                    {
                        var obj = Default(this.T);
                        if (System.App.IsJs())
                        {
                            obj = oplog.get_OpStr();
                        }
                        else
                        {
                            obj = OpLog.JavaScriptSerializer.Deserialize$1$$Object(this.T, oplog.get_OpStr());
                        }
                        for (var $i25 = 0, $t25 = OpLog.Exctions.GetPropertys(this.get_BindObject()), $l25 = $t25.length, pinfo = $t25[$i25]; $i25 < $l25; $i25++, pinfo = $t25[$i25])
                        {
                            if (pinfo.get_CanRead() && pinfo.get_CanWrite())
                            {
                                if (System.App.IsJs() || OpLog.JavaScriptSerializer.ContainsKey(oplog.get_OpStr(), pinfo.get_Name()))
                                {
                                    var value = OpLog.Exctions.GetPropertyValue(pinfo, obj);
                                    OpLog.Exctions.SetPropertyValue(pinfo, this.get_BindObject(), value);
                                    if (Is(value, OpLog.IOpItem.ctor))
                                    {
                                        this.BindSubItem(As(value, OpLog.IOpItem.ctor), source);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case OpLog.Op.Inster:
                case OpLog.Op.Delete:
                    {
                        var list = OpLog.Exctions.GetValue(this.get_BindObject(), oplog.get_Ns());
                        if (oplog.get_Op() == OpLog.Op.Inster)
                        {
                            var $it25 = As(list, System.Collections.IList.ctor).GetEnumerator();
                            while ($it25.MoveNext())
                            {
                                var item = $it25.get_Current();
                                if (Is(item, OpLog.IOpItem.ctor) && (As(item, OpLog.IOpItem.ctor)).get_OpId() == oplog.get_OId())
                                {
                                    return;
                                }
                            }
                            var subobj = null;
                            if (System.App.IsJs())
                            {
                                subobj = oplog.get_OpStr();
                            }
                            else
                            {
                                subobj = OpLog.JavaScriptSerializer.Deserialize$$Object$$Type(oplog.get_OpStr(), this.GetGenericType(Typeof(this.T).GetProperty$$String(oplog.get_Ns()).get_PropertyType()));
                            }
                            if (Is(list, OpLog.IOpList.ctor))
                            {
                                (As(list, OpLog.IOpList.ctor)).AddItem(subobj);
                            }
                            else
                            {
                                (As(list, System.Collections.IList.ctor)).Add(subobj);
                            }
                            if (Is(subobj, OpLog.IOpItem.ctor))
                            {
                                this.BindSubItem(As(subobj, OpLog.IOpItem.ctor), this.get_Source());
                            }
                        }
                        else
                        {
                            var $it26 = As(list, System.Collections.IList.ctor).GetEnumerator();
                            while ($it26.MoveNext())
                            {
                                var item = $it26.get_Current();
                                if (Is(item, OpLog.IOpItem.ctor) && (As(item, OpLog.IOpItem.ctor)).get_OpId() == oplog.get_OId())
                                {
                                    if (Is(list, OpLog.IOpList.ctor))
                                    {
                                        (As(list, OpLog.IOpList.ctor)).RemoveItem(item);
                                    }
                                    else
                                    {
                                        (As(list, System.Collections.IList.ctor)).Remove(item);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    break;
            }
        },
        GetGenericType: function (type)
        {
            var types = type.GetGenericArguments();
            switch (types.length)
            {
                case 1:
                    return types[0];
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Dispose: function ()
        {
            if (this.get_Source() != null)
            {
                this.get_Source().remove_OnDisposing($CreateDelegate(this, this.Source_OnDisposing));
                this.set_Source(null);
                this.set_BindObject(null);
            }
        }
    }
};
JsTypes.push(OpLog$OpLogSyncBind$1);

